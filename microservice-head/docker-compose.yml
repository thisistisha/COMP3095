# 1. docker-compose -p microservices-comp3095-ecommerce -f docker-compose.yml up -d
# --this command will start the containers in detached mode without rebuilding the images (if they already exist)
#
#2. docker-compose -p microservices-comp3095-ecommerce -f docker-compose.yml up -d --build
# -- This command forces the rebuild of images, even if the image already exist,before starting the containers

version : '3.9'

services:

  product-service:
    image: product-service
    ports:
      - "8084:8084"  #external:internal  when communicating from host machine:
    build:
      context: ./product-service    #directory where the Dockerfile resides
      dockerfile: ./Dockerfile    #specify dockerfile for use to build image
    container_name: product-service-first
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring

  mongodb:
    image: mongo:latest
    container_name: mongodb-service
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=rootadmin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/products:/data/db    #locally creating a data folder and subfolders
        # writing virtually logically in data/db but relaistically in mongo/products
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
        #Initialize mongodb with data from this script
        #mapping host to the containerized env  : read and only
    #restart: unless-stopped
    #command: mongod -auth
    networks:
      - spring


  mongo-express:
    image: mongo-express
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=rootadmin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb   #connect mongo-express to the mongodb container by name
    container_name: mongo-express-serv
    restart: unless-stopped
    depends_on:
      - mongodb
    networks:
      - spring

  postgres:
    image: postgres:11-alpine
    container_name: postgres-db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: rootadmin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: postgres_db
    #volumes:
     # - ./data/postgres:/var/lib/postgresql/data
     # - ./init/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "8888:80"
    container_name: pgadmin-container
    environment:
      - PGADMIN_DEFAULT_EMAIL=user@domain.ca
      - PGADMIN_DEFAULT_PASSWORD=password
    depends_on:
      - postgres
    networks:
      - spring

  inventory-service:
    build:
      context: ./inventory-service
      dockerfile: Dockerfile
    image: inventory-service:1.0
    ports:
      - "5433:5432"
    container_name: postgres-inventory-service
    environment:
      - POSTGRES_USER=rootadmin
      - POSTGRES_PASSWORD=password
      - SPRING_PROFILES_ACTIVE=docker
      #- POSTGRES_DB=inventory-service
      #- PGDATA: /data/postgres
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./init/postgres/inventory/init.sql:/docker-entrypoint-initdb.d/init.sql
    depends_on:
      - postgres
    networks:
      - spring


  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    image: order-service:1.0
    ports:
      - "5434:5432"
    container_name: postgres-order-service
    environment:
      - POSTGRES_USER=rootadmin
      - POSTGRES_PASSWORD=password
      - SPRING_PROFILES_ACTIVE=docker
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./init/postgres/order/init.sql:/docker-entrypoint-initdb.d/init.sql
    depends_on:
      - postgres
    networks:
      - spring

        #optional volumes
volumes:
  mongo-db:
    driver: local

networks:
  spring:
    driver: bridge